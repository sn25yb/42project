1. 다중상속(다이아몬드)은 거의 사용하지 않는다. 그렇다면, 언제 사용할 수 있을까?
	ㄴ  상속받는 클래스들의 변수의 값들이 모두 동일하되 두 클래스에 있는 함수를 모두 사용해야 할 때가 아닐까? 

[GPT]
C++에서 다중 상속을 사용하는 것은 여러 상황에서 유용할 수 있지만, 주의해야 할 점도 많습니다. 다중 상속이 특히 유용한 예외적인 경우는 다음과 같습니다:

- 인터페이스 통합: 여러 인터페이스를 상속받아 클래스에서 다양한 기능을 구현하고 싶을 때. 예를 들어, Serializable와 Comparable 인터페이스를 동시에 상속받아 두 기능을 모두 갖춘 클래스가 필요할 수 있습니다.
- 공통 기능 재사용: 여러 클래스에서 공통적으로 사용되는 기능을 가진 기본 클래스를 만들어 다중 상속을 통해 이 기능을 재사용할 수 있습니다. 예를 들어, Drawable과 Transformable 같은 클래스를 상속받아 그래픽 오브젝트를 만들 수 있습니다.
- 프레임워크의 확장: 특정 프레임워크를 확장할 때, 여러 부모 클래스를 상속받아 다양한 기능을 조합할 수 있습니다. 예를 들어, GUI 프레임워크에서 Button과 Clickable을 동시에 상속받아 버튼의 클릭 기능을 추가할 수 있습니다.
- MRO (Method Resolution Order): 특정 알고리즘이나 데이터 구조에서 다중 상속이 필요할 때. 예를 들어, 다이아몬드 문제를 해결하기 위해 C++11 이후에는 virtual 상속을 사용하여 특정 클래스를 한 번만 상속받도록 설정할 수 있습니다.
- 데이터 구조 통합: 서로 다른 데이터 구조를 하나의 클래스로 통합할 때, 다중 상속을 통해 각각의 구조체에서 기능을 상속받을 수 있습니다.

이와 같은 경우에는 다중 상속이 효과적일 수 있지만, 복잡성과 유지보수의 어려움이 증가할 수 있으므로 신중하게 사용해야 합니다. 가능하다면 단일 상속이나 구성(composition) 패턴을 고려하는 것이 좋습니다.